/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fractal.common;

import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.filechooser.FileFilter;
import org.jdesktop.swingx.JXImagePanel;

/**
 *
 * @author lloyd
 */
public class FractalViewer extends javax.swing.JFrame {

    private final FractalRenderer fractalRenderer;
    
    private Resolution activeResolution = Resolution.HD;
    private BufferedImage baseImage;

    /**
     * Creates new form FractalViewer
     *
     * @param fractalRenderer
     */
    public FractalViewer(FractalRenderer fractalRenderer) {
        initComponents();
        setResolutions();
        this.fractalRenderer = fractalRenderer;
        setTitle(fractalRenderer.getName());

        colorOptionsPanel.setLayout(new GridLayout(1, 1));
        if (fractalRenderer.getActiveColorCalculator() != null && fractalRenderer.getActiveColorCalculator().getSettingsComponent() != null) {
            colorOptionsPanel.add(fractalRenderer.getActiveColorCalculator().getSettingsComponent());
        } else {
            colorOptionsPanel.setVisible(false);
        }

        if (fractalRenderer.getFractalEngine().getSettingsComponent() != null) {
            engineOptionsPanel.setLayout(new GridLayout(1, 1));
            engineOptionsPanel.add(fractalRenderer.getFractalEngine().getSettingsComponent());
        } else {
            engineOptionsPanel.setVisible(false);
        }

        if (fractalRenderer.getSettingsComponent() != null) {
            fractalOptionsPanel.setLayout(new GridLayout(1, 1));
            fractalOptionsPanel.add(fractalRenderer.getSettingsComponent());
        } else {
            fractalOptionsPanel.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXImagePanel1 = new org.jdesktop.swingx.JXImagePanel();
        saveButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        redrawButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSpinner4 = new javax.swing.JSpinner();
        resolutionComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        engineOptionsPanel = new javax.swing.JPanel();
        fractalOptionsPanel = new javax.swing.JPanel();
        colorOptionsPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jXImagePanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jXImagePanel1.setStyle(org.jdesktop.swingx.JXImagePanel.Style.SCALED_KEEP_ASPECT_RATIO);
        jXImagePanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jXImagePanel1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jXImagePanel1MouseMoved(evt);
            }
        });
        jXImagePanel1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jXImagePanel1MouseWheelMoved(evt);
            }
        });
        jXImagePanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jXImagePanel1MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jXImagePanel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jXImagePanel1MouseReleased(evt);
            }
        });
        jXImagePanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jXImagePanel1ComponentResized(evt);
            }
        });

        javax.swing.GroupLayout jXImagePanel1Layout = new javax.swing.GroupLayout(jXImagePanel1);
        jXImagePanel1.setLayout(jXImagePanel1Layout);
        jXImagePanel1Layout.setHorizontalGroup(
            jXImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jXImagePanel1Layout.setVerticalGroup(
            jXImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Image Resolution:");

        redrawButton.setText("Redraw");
        redrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redrawButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Rendered in:");

        jLabel6.setText("jLabel6");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("General"));

        jLabel3.setText("Resolution:");

        jLabel7.setText("Anti Alias Grid Width:");

        jSpinner4.setModel(new javax.swing.SpinnerNumberModel(1, 1, 8, 1));
        jSpinner4.setValue(1);
        jSpinner4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner4StateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner4, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resolutionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(resolutionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)))
        );

        jLabel4.setText("jLabel4");

        jLabel8.setText("Mouse Position:");

        jLabel9.setText("Draw area Resolution:");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        engineOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Engine Options"));

        javax.swing.GroupLayout engineOptionsPanelLayout = new javax.swing.GroupLayout(engineOptionsPanel);
        engineOptionsPanel.setLayout(engineOptionsPanelLayout);
        engineOptionsPanelLayout.setHorizontalGroup(
            engineOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 258, Short.MAX_VALUE)
        );
        engineOptionsPanelLayout.setVerticalGroup(
            engineOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        fractalOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Fractal Options"));

        javax.swing.GroupLayout fractalOptionsPanelLayout = new javax.swing.GroupLayout(fractalOptionsPanel);
        fractalOptionsPanel.setLayout(fractalOptionsPanelLayout);
        fractalOptionsPanelLayout.setHorizontalGroup(
            fractalOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        fractalOptionsPanelLayout.setVerticalGroup(
            fractalOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        colorOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Color Options"));

        javax.swing.GroupLayout colorOptionsPanelLayout = new javax.swing.GroupLayout(colorOptionsPanel);
        colorOptionsPanel.setLayout(colorOptionsPanelLayout);
        colorOptionsPanelLayout.setHorizontalGroup(
            colorOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        colorOptionsPanelLayout.setVerticalGroup(
            colorOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(engineOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(fractalOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(colorOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(engineOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fractalOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jScrollPane1.setViewportView(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXImagePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 335, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(redrawButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {redrawButton, resetButton, saveButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jXImagePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(redrawButton)
                            .addComponent(saveButton)
                            .addComponent(resetButton)))
                    .addComponent(jSeparator1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    private Complex newC1, newC;
    private Point newP1, newP2;
    private void jXImagePanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXImagePanel1MousePressed
        if (evt.getButton() == MouseEvent.BUTTON1) {
            newP1 = new Point(evt.getX(), evt.getY());
            baseImage = (BufferedImage) jXImagePanel1.getImage();
        }
    }//GEN-LAST:event_jXImagePanel1MousePressed

    private void jXImagePanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXImagePanel1MouseReleased
        if (evt.getButton() == MouseEvent.BUTTON1) {
            Complex newC1 = fractalRenderer.getMapper().mapToComplex(newP1.x, newP1.y, jXImagePanel1);
            Complex newC2 = fractalRenderer.getMapper().mapToComplex(evt.getX(), evt.getY(), jXImagePanel1);

            if (newC2.r < newC1.r) {
                double temp = newC2.r;
                newC2.r = newC1.r;
                newC1.r = temp;
            }
            if (newC2.i > newC1.i) {
                double temp = newC2.i;
                newC2.i = newC1.i;
                newC1.i = temp;
            }

            fractalRenderer.render(activeResolution.getWidth(), activeResolution.getHeight(), newC1, newC2);
        } else if (evt.getButton() == MouseEvent.BUTTON2) {
            Complex clickLocation = fractalRenderer.getMapper().mapToComplex(evt.getX(), evt.getY(), jXImagePanel1);
            fractalRenderer.performSpecialClickAction(clickLocation);
        } else if (evt.getButton() == MouseEvent.BUTTON3) {
            System.out.println("zoom out");
        }
    }//GEN-LAST:event_jXImagePanel1MouseReleased

    public void drawNow() {
        redrawButtonActionPerformed(null);
    }   
    
    private void redrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redrawButtonActionPerformed
        fractalRenderer.render(activeResolution.getWidth(), activeResolution.getHeight(), fractalRenderer.getMapper().getTopLeft(), fractalRenderer.getMapper().getBottomRight());
    }//GEN-LAST:event_redrawButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        fractalRenderer.render((Integer) activeResolution.getWidth(), activeResolution.getHeight(), fractalRenderer.getFractalEngine().getDefaultView().getFirst(), fractalRenderer.getFractalEngine().getDefaultView().getSecond());
    }//GEN-LAST:event_resetButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser ch = new JFileChooser();
        ch.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.getPath().endsWith(".png") || f.isDirectory();
            }

            @Override
            public String getDescription() {
                return ".png";
            }
        });
        if (ch.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            try {
                if (!ch.getSelectedFile().getName().endsWith(".png")) {
                    ch.setSelectedFile(new File(ch.getSelectedFile().getPath()+".png"));
                }
                ImageIO.write(fractalRenderer.getImage().getBufferedImage(), "png", ch.getSelectedFile());
            } catch (IOException ex) {
                Logger.getLogger(FractalViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void jSpinner4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner4StateChanged
        if (fractalRenderer instanceof Antialiasable) {
            ((Antialiasable) fractalRenderer).setAA((Integer) jSpinner4.getValue());
        }
    }//GEN-LAST:event_jSpinner4StateChanged

    private void jXImagePanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXImagePanel1MouseMoved
        if (jXImagePanel1.getImage() != null) {
            Complex mousePosition = fractalRenderer.getMapper().mapToComplex(evt.getX(), evt.getY(), jXImagePanel1);
            jLabel4.setText(mousePosition.toStringZeroFill());

            fractalRenderer.mouseMoved(mousePosition);
        }
    }//GEN-LAST:event_jXImagePanel1MouseMoved

    private void jXImagePanel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXImagePanel1MouseExited
        jLabel4.setText("N/A");
    }//GEN-LAST:event_jXImagePanel1MouseExited

    private void jXImagePanel1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jXImagePanel1ComponentResized
        jLabel9.setText("Draw area Resolution: " + jXImagePanel1.getWidth() + " X " + jXImagePanel1.getHeight());
    }//GEN-LAST:event_jXImagePanel1ComponentResized

    private void jXImagePanel1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jXImagePanel1MouseWheelMoved
        double imageWidth = (double)fractalRenderer.getImage().getBufferedImage().getWidth();
        double imageHeight = (double)fractalRenderer.getImage().getBufferedImage().getHeight();
        
        double scaleRatio = Math.min((double) jXImagePanel1.getWidth() / (double) jXImagePanel1.getImage().getWidth(null), (double) jXImagePanel1.getHeight() / (double) jXImagePanel1.getImage().getHeight(null));
        int scaledImageWidth = (int) (jXImagePanel1.getImage().getWidth(null) * scaleRatio);
        int scaledImageHeight = (int) (jXImagePanel1.getImage().getHeight(null) * scaleRatio);
        int xSub = (jXImagePanel1.getWidth() - scaledImageWidth) / 2;
        int ySub = (jXImagePanel1.getHeight() - scaledImageHeight) / 2;
        double relativeX = (double) ((evt.getX() - xSub)) / scaleRatio;
        double relativeY = imageHeight - (double) ((evt.getY() - ySub)) / scaleRatio;
        
        double fracRight = relativeX/(double)fractalRenderer.getImage().getBufferedImage().getWidth();
        double fracTop = relativeY/(double)fractalRenderer.getImage().getBufferedImage().getHeight();
        
        double zoomStrength = 0.2;//20% = 10% on each side if zooming into center
        
        double cutoffLeft = fracRight * imageWidth * zoomStrength * -evt.getWheelRotation();
        double cutoffRight = (1-fracRight) * imageWidth * zoomStrength * -evt.getWheelRotation();
        double cutoffBottom = fracTop * imageHeight * zoomStrength * -evt.getWheelRotation();
        double cutoffTop = (1-fracTop) * imageHeight * zoomStrength * -evt.getWheelRotation();
        
        int newTop = (int) Math.round(cutoffTop);
        int newBottom = (int) Math.round(imageHeight - cutoffBottom);
        int newLeft = (int) Math.round(cutoffLeft);
        int newRight = (int) Math.round(imageWidth - cutoffRight);
        
        Complex newTopLeft = fractalRenderer.getMapper().mapToComplex(newLeft, newTop);
        Complex newBottomRight = fractalRenderer.getMapper().mapToComplex(newRight, newBottom);
        
        fractalRenderer.render(activeResolution.getWidth(), activeResolution.getHeight(), newTopLeft, newBottomRight);
        
    }//GEN-LAST:event_jXImagePanel1MouseWheelMoved

    private void jXImagePanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXImagePanel1MouseDragged
        
//        double imageAspect = (double)fractalRenderer.getImage().getBufferedImage().getWidth()/(double)fractalRenderer.getImage().getBufferedImage().getHeight();
//        
//        Point p1 = newP1;
//        Point p2 = new Point(evt.getX(), evt.getY());
//        double marqueeAspect = Math.abs((double)(p2.x-p1.x) / (double)(p2.y-p1.y));
//        
//        if (p2.x > p1.x) {//dragging RIGHT
//            if (p2.y > p1.y) {//dragging DOWN
//                if (marqueeAspect > imageAspect) {//wide marquee, make taller
//                    
//                } else if (marqueeAspect < imageAspect) {
//                    
//                }
//            } else if (p2.y < p1.y) {//dragging UP
//                if (marqueeAspect > imageAspect) {//wide marquee, make taller
//                     
//                } else if (marqueeAspect < imageAspect) {
//                    
//                }
//            }
//        } else if (p2.x < p1.x) {//dragging LEFT
//            if (p2.y > p1.y) {//dragging DOWN
//                if (marqueeAspect > imageAspect) {//wide marquee, make taller
//                    
//                } else if (marqueeAspect < imageAspect) {
//                    
//                }
//            } else if (p2.y < p1.y){//dragging UP
//                if (marqueeAspect > imageAspect) {//wide marquee, make taller
//                    
//                } else if (marqueeAspect < imageAspect) {
//                    
//                }
//            }
//        }
        
        
        
//        Complex transientP2 = fractalRenderer.getMapper().mapToComplex(evt.getX(), evt.getY(), jXImagePanel1);
//        
//        Point p1 = fractalRenderer.getMapper().mapToImage(newP1);
//        Point p2 = fractalRenderer.getMapper().mapToImage(transientP2);
//        
//        if (p2.x < p1.x) {
//            int temp = p2.x;
//            p2.x = p1.x;
//            p1.x = temp;
//        }
//        if (p2.y < p1.y) {
//            int temp = p2.y;
//            p2.y = p1.y;
//            p1.y = temp;
//        }
//        
//        double marqueeAspect = (double)(p2.x-p1.x) / (double)(p2.y-p1.y);
//        if (marqueeAspect < aspectRatio) {//wide marquee, make taller
//            p2.x = (int) (p1.x + (p2.y-p1.y)*aspectRatio);
//        } else if (marqueeAspect > aspectRatio) {
//            p2.y = (int) (p1.y + (p2.x-p1.x)/aspectRatio);
//        }
        
//        BufferedImage im = ImageUtils.deepCopy(baseImage);
//        im.getGraphics().drawRect(p1.x, p1.y, p2.x-p1.x, p2.y-p1.y);
//        jXImagePanel1.setImage(im);
    }//GEN-LAST:event_jXImagePanel1MouseDragged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel colorOptionsPanel;
    private javax.swing.JPanel engineOptionsPanel;
    private javax.swing.JPanel fractalOptionsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner jSpinner4;
    private org.jdesktop.swingx.JXImagePanel jXImagePanel1;
    private javax.swing.JButton redrawButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox<Resolution> resolutionComboBox;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    public void setImage(BufferedImage bufferedImage) {
        jXImagePanel1.setImage(bufferedImage);
        jLabel1.setText(bufferedImage.getWidth() + " X " + bufferedImage.getHeight());
    }

    public BufferedImage getImage() {
        return (BufferedImage) jXImagePanel1.getImage();
    }
    
    public JXImagePanel getImagePanel(){
        return jXImagePanel1;
    }

    public void setRenderTime(long lastRenderTime) {
        jLabel6.setText(((double) lastRenderTime) / 1000d + "s");
    }

    void updateColorCalculator(ColorCalculator colorCalculator) {
        if (colorCalculator.getSettingsComponent() != null) {
            colorOptionsPanel.removeAll();
            colorOptionsPanel.add(colorCalculator.getSettingsComponent());
            colorOptionsPanel.setVisible(true);
        } else {
            colorOptionsPanel.removeAll();
            colorOptionsPanel.setVisible(false);
        }
        revalidate();
    }

    private void setResolutions() {
        resolutionComboBox.removeAllItems();
        for (Resolution r : Resolution.values()) {
            resolutionComboBox.addItem(r);
        }
        resolutionComboBox.setSelectedItem(Resolution.HD);
        
        resolutionComboBox.setRenderer(new ListCellRenderer<Resolution>() {
            @Override
            public Component getListCellRendererComponent(JList<? extends Resolution> list, Resolution value, int index, boolean isSelected, boolean cellHasFocus) {
                return new JLabel(value.getDisplayName());
            }
        });
        
        resolutionComboBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    activeResolution = (Resolution) e.getItem();
                }
            }
        });
    }

}
